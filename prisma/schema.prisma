generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  createdAt         DateTime           @default(now())
  bio               String?
  // パスワードリセット用
  passwordResetToken String?
  passwordResetExpires DateTime?
  // 同意情報
  participantName    String?   // 実験参加者名
  consentDate        DateTime? // 同意日時
  consentParticipated Boolean? // 参加同意
  consentInterview    Boolean? // インタビュー同意
  consentDataUsage   Boolean? // データ使用同意
  consentRecording   Boolean? // 録音同意
  // リレーション
  chats1            Chat[]             @relation("ChatUser1")
  chats2            Chat[]             @relation("ChatUser2")
  matchedPairs1     MatchPair[]        @relation("MatchPairUser1")
  matchedPairs2     MatchPair[]        @relation("MatchPairUser2")
  messagesSent      Message[]          @relation("UserMessages")
  pushSubscriptions PushSubscription[] @relation("UserSubscriptions")
  receivedMessages  SentMessage[]      @relation("ReceivedMessages")
  sentMessages      SentMessage[]      @relation("SentMessages")
  friends           Friend[]           @relation("UserFriends")
  friendOf          Friend[]           @relation("FriendOf")
  friendRestriction FriendRestriction? @relation("UserFriendRestriction")
}

model SentMessage {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  message    String
  createdAt  DateTime @default(now())
  linkImage  String?
  linkTitle  String?
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
}

model MatchPair {
  id        String   @id @default(uuid())
  user1Id   String
  user2Id   String
  message   String
  matchedAt DateTime @default(now())
  user1     User     @relation("MatchPairUser1", fields: [user1Id], references: [id])
  user2     User     @relation("MatchPairUser2", fields: [user2Id], references: [id])
}

model Chat {
  id        String    @id @default(uuid())
  user1Id   String
  user2Id   String
  createdAt DateTime  @default(now())
  user1     User      @relation("ChatUser1", fields: [user1Id], references: [id])
  user2     User      @relation("ChatUser2", fields: [user2Id], references: [id])
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
}

model PushSubscription {
  id           String   @id @default(cuid())
  userId       String
  endpoint     String   @unique
  subscription Json
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  user         User     @relation("UserSubscriptions", fields: [userId], references: [id])

  @@index([userId])
}

model PresetMessage {
  id        String   @id @default(uuid())
  content   String
  createdBy String
  createdAt DateTime @default(now())
  count     Int      @default(0) // 送信回数
  senderCount Int    @default(0) // 送信者数
  linkImage String?
  linkTitle String?
  comment   String?  // ユーザーコメント
  type      String   @default("text") // "text" | "url"
  lastSentAt DateTime @default(now()) // 最後に送信された時刻
}

model Friend {
  id        String   @id @default(uuid())
  userId    String   // 認証する側のユーザー
  friendId  String   // ともだちとして認証される側のユーザー
  createdAt DateTime @default(now())
  
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendOf", fields: [friendId], references: [id])
  
  @@unique([userId, friendId]) // 重複防止
  @@index([userId])
}

model FriendRestriction {
  id         String   @id @default(uuid())
  userId     String   @unique
  lastChange DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  user       User     @relation("UserFriendRestriction", fields: [userId], references: [id])
}
